/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import model.PuzzleModel;

/**
 *
 * @author ttn21
 */
public class PuzzlePanel extends javax.swing.JPanel {

    private final Font biggerFont = new Font("Time New Roman", Font.BOLD, 24);
    private PuzzleModel puzzleModel;
    private JButton[][] buttonArray;
    private int size;
    private int moveCount;

    /**
     * Creates new form PuzzlePanel
     */
    public PuzzlePanel() {
        initComponents();
    }

    
    /**
     * Creates new form PuzzlePanel
     */
    public PuzzlePanel(int size) {
        initComponents();
        this.size = size;
        moveCount = 0;
        
        this.setLayout(new GridLayout(size, size, 0, 0));
        
        puzzleModel = new PuzzleModel(size);
        buttonArray = new JButton[size][size];
        initPuzzleModel();
        initButton();        
    }

    public int getMoveCount() {
        return moveCount;
    }

    public void setMoveCount(int moveCount) {
        this.moveCount = moveCount;
    }

    public PuzzleModel getPuzzleModel() {
        return puzzleModel;
    }

    /**
     * Create a puzzle block and shuffle them until it is solvable
     */
    public void initPuzzleModel() {
        do {
            puzzleModel.generateBlock();
            puzzleModel.shuffleBlock();
        } while (!puzzleModel.isSolvable());
    }

    /**
     * Stop player from hitting tile when finish the game
     */
    public void showCompletePuzzle() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                buttonArray[i][j].setEnabled(false);
            } //end for            
        } //end for

    }

    /**
     * Load button value and add to Panel
     */
    public void initButton() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                final int row = i;
                final int col = j;
                buttonArray[i][j] = new JButton(puzzleModel.getTile(i, j).getValue());
                buttonArray[i][j].setFont(biggerFont);
                if (puzzleModel.getTile(i, j).isEmptyTile()) {
                    buttonArray[i][j].setBackground(Color.GRAY);
                }
                this.add(buttonArray[i][j]);
            }
        }
        addListenerToButton();
    } //end method

    /**
     * This method add listener to each button for move/change aciton
     */
    public void addListenerToButton() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                final int row = i;
                final int col = j;
                buttonArray[i][j].addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (puzzleModel.moveTile(row, col)) {
                            moveCount++;
                            updateButton();
                            buttonArray[row][col].setBackground(Color.GRAY);
                        }
                        Component source = (Component) e.getSource();

                        // recursively find the root Component in my main app class
                        while (source.getParent() != null) {
                            source = source.getParent();
                        }

                        // once found, call the dispatch the current event to the root component
                        if (source instanceof ActionListener) {
                            ((ActionListener) source).actionPerformed(e);
                        }
                    }
                });
            }
        }
    } //end method

    /**
     * Update GUI when tile is moved
     */
    public void updateButton() {
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                buttonArray[row][col].setText(puzzleModel.getTile(row, col).getValue());
                if (!puzzleModel.getTile(row, col).isEmptyTile()) {
                    buttonArray[row][col].setBackground(new JButton().getBackground());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
